%!PS-Adobe-3.0 EPSF-3.0
%%Title: Two Sample Logo 
%%Creator: TSL 1.2
%%CreationDate: 
%%BoundingBox:   0  0  {$LOGO_WIDTH_POINTS}  {$LOGO_HEIGHT_POINTS} 
%%Pages: 0
%%DocumentFonts: 
%%EndComments


% ---- CONSTANTS ----
/cmfactor 72 2.54 div def % defines points -> cm conversion
/cm {cmfactor mul} bind def % defines centimeters


% ---- VARIABLES ----
/logoWidth {$LOGO_WIDTH} cm def
/lineHeight {$LOGO_LINE_HEIGHT} cm def
/logoTitle ({$TITLE}) def

/yaxis {$YAXIS} def
/yaxisUnits {$MAX_HEIGHT} def % bits
/maxLabel ({$MAX_LABEL}) def

/xaxis {$XAXIS} def

/charsPerLine {$CHARS_PER_LINE} def
/logoLines 2 def

/showingBox ({$SHOW_BOX}) def    %n s f
/shrinking {$SHRINK} def
/shrink {$SHRINK_FACTOR} def
/outline {$OUTLINE} def
/fixedHeight {$FIXED_HEIGHT} def

/fontsize       11 def
/titleFontsize  14 def
/smallFontsize  10 def

/blue      [0 0 1] def
/black     [0 0 0] def
/cyan      [0 1 1] def
/green 	   [0 1 0] def
/greenblue [0.18 0.55 0.34] def
/magenta   [1 0 1] def
/orange	   [1 0.65 0] def
/purple    [0.63 0.13 0.94] def
/red       [1 0 0] def
/redorange [1 0.27 0] def
/violet    [0.93 0.51 0.93] def
/white     [1 1 1] def
/yellow    [1 1 0] def

{$COLOR_DICT}


% ---- DERIVED PARAMETERS ----

/leftMargin
    fontsize 3.5 mul
def 


/rightMargin
    fontsize
def


/topMargin 
    logoTitle () eq {fontsize}{titleFontsize 4 add} ifelse
def


/middleMargin
    fontsize 1.75 mul
def


/bottomMargin
    fontsize 0.75 mul
def


/yaxisHeight 
    lineHeight
    topMargin 2 div sub
    middleMargin 2 div sub
    bottomMargin 2 div sub  
def


/ticWidth
    fontsize 2 div
def


/pointsPerBit
    yaxisHeight yaxisUnits div
def


/isBoxed 
    showingBox (s) eq
    showingBox (f) eq or {true} {false} ifelse
def

/stackMargin 2 def

% Do not add space aroung characters if characters are boxed
/charRightMargin 
    isBoxed { 0.0 } {stackMargin} ifelse
def


/charTopMargin 
    isBoxed { 0.0 } {stackMargin} ifelse
def


/charWidth
    logoWidth
    leftMargin sub
    rightMargin sub
    charsPerLine div
    charRightMargin sub
def


/stackWidth 
    charWidth charRightMargin add
def

 
/numberFontsize 
    fontsize charWidth lt {fontsize}{charWidth} ifelse
def


%
% Outline width is proporional to charWidth, 
% but no less that 1 point
%
/outlinewidth 
    charWidth 32 div dup 1 gt  {}{pop 1} ifelse
def


% ---- PROCEDURES ----

/StartLogo { 
  % Save state
  save 
  gsave 

    % Print Logo Title, top center 
    gsave 
        SetTitleFont

        logoWidth 2 div
        logoTitle
        stringwidth pop 2 div sub
        lineHeight logoLines mul  
        titleFontsize sub
        moveto

        logoTitle
        show
    grestore


    % Move to lower left corner of last line, first stack
    leftMargin 0 translate

    % Move above first line ready for StartLine 
    0 logoLines lineHeight mul topMargin sub translate

    SetLogoFont
} bind def


/EndLogo  { 
    grestore 
    showpage 
    % restore this command is broken.
} bind def


/StartEnrichedLine  {
    0 yaxisHeight neg translate

    % X-axis separates enriched from depleted residues
    gsave
        newpath
        0 0 moveto
        logoWidth leftMargin sub rightMargin sub 0 rlineto
        stroke
    grestore

    save 
        yaxis { MakeYaxis } if
} bind def

/StartConservedLine  {
    0 middleMargin neg translate

} bind def

/StartDepletedLine  {
    0 middleMargin neg translate

    % X-axis separates enriched from depleted residues
    gsave
        newpath
        0 0 moveto
        logoWidth leftMargin sub rightMargin sub 0 rlineto
        stroke
    grestore

    save
        yaxis { MakeYaxis } if
} bind def


/EndLine  { 
    grestore 
} bind def


/MakeYaxis  {
  gsave    
    stackMargin neg 0 translate
    ShowYaxisBar
    ShowYaxisLabel
  grestore
} bind def


/ShowYaxisBar { 
  gsave  
    SetStringFont

    /str 10000 string def % string to hold number  
    /smallgap stackMargin 2 div def

    % Draw first tic and bar
    fixedHeight not {
    gsave    
      ticWidth neg 0 moveto 
      ticWidth 0 rlineto 
      topLine {0 yaxisHeight rlineto} {0 yaxisHeight neg rlineto} ifelse
      ticWidth neg 0 rlineto 
      stroke
    grestore

      maxLabel stringwidth pop
      /numberwidth exch def % width of number to show


      /halfnumberheight
         maxLabel CharBoxHeight 2 div
      def

      topLine {
          numberwidth neg 
          yaxisUnits pointsPerBit mul
          1 add
          moveto
      }  {
          numberwidth
          neg yaxisUnits pointsPerBit mul
          halfnumberheight add 
          halfnumberheight add 
          -1 mul
          moveto
      } ifelse


      SetSmallFont
      0 setgray
      maxLabel show
      smallgap 0 rmoveto % Make a small gap  

      stroke

    } if

  grestore
} bind def


/ShowYaxisLabel  {
  gsave
    SetSmallFont

    /yaxisLabel topLine {(enriched)} {(depleted)} ifelse def


    % How far we move left depends on the size of
    % the tic labels.
    /str 10 string def % string to hold number  
    yaxisUnits 1 div cvi 1 mul 
    str cvs stringwidth pop
    ticWidth 1.5 mul  add neg  

    topLine  {
        yaxisHeight
        yaxisLabel stringwidth pop
        sub 2 div
    } {
        yaxisHeight
        yaxisLabel stringwidth pop
        sub 2 div
        yaxisHeight sub
    } ifelse

    translate
    90 rotate
    0 0 moveto
    yaxisLabel show
  grestore
} bind def


/StartStack {  % <stackNumber> startstack
  xaxis { topLine {MakeNumber} if }{pop} ifelse
  gsave
} bind def

/EndStack {
  grestore
  stackWidth 0 translate
} bind def


% Draw a character whose height is proportional to symbol bits
/MakeSymbol{ % charbits character MakeSymbol
  gsave
    /char exch def
    /bits exch def

    /bitsHeight 
       bits pointsPerBit mul 
    def

    /charHeight 
       topLine {bitsHeight charTopMargin sub} {bitsHeight charTopMargin add} ifelse
    def 

    char ( ) ne  {
        topLine  { 
          0  1 charWidth charHeight 1 sub true DrawMask 
        } {
           0 -1 charWidth charHeight 1 sub true DrawMask 
        } ifelse

    } if


    char SetColor
    charWidth charHeight char ShowChar

    showingBox (s) eq { % Unfilled box
      0 0 charWidth charHeight false ShowBox
    } if

    showingBox (f) eq { % Filled box
      0 0 charWidth charHeight true ShowBox
    } if
  grestore

  0 bitsHeight translate 
} bind def


/ShowChar { % <width> <height> <char> ShowChar
  gsave
    /tc exch def    % The character
    /ysize exch def % the y size of the character
    /xsize exch def % the x size of the character

    /xmulfactor 1 def 
    /ymulfactor 1 def

  
    % if ysize is negative, translate down 
    ysize 0 lt {
      0 ysize translate
      /ysize ysize abs def
    } if

    shrinking {
      xsize 1 shrink sub 2 div mul
        ysize 1 shrink sub 2 div mul translate 

      shrink shrink scale
    } if

    % Calculate the font scaling factors
    % Loop twice to catch small correction due to first scaling
    2 {
      gsave
        xmulfactor ymulfactor scale
      
        ysize % desired size of character in points
        tc CharBoxHeight 
        dup 0.0 ne {
          div % factor by which to scale up the character
          /ymulfactor exch def
        } % end if
        {pop pop}
        ifelse

        xsize % desired size of character in points
        tc CharBoxWidth  
        dup 0.0 ne {
          div % factor by which to scale up the character
          /xmulfactor exch def
        } % end if
        {pop pop}
        ifelse
      grestore
    } repeat

    % Adjust horizontal position if the symbol is an I
    tc (I) eq {
      charWidth 2 div % half of requested character width
      tc CharBoxWidth 2 div % half of the actual character
      sub 0 translate
      % Avoid x scaling for I 
      /xmulfactor 1 def 
    } if


    % ---- Finally, draw the character
  
    newpath
    xmulfactor ymulfactor scale

    % Move lower left corner of character to start point
    tc CharBox pop pop % llx lly : Lower left corner
    exch neg exch neg
    moveto

    outline {  % outline characters:
      outlinewidth setlinewidth
      tc true charpath
      gsave 1 setgray fill grestore
      clip stroke
    } { % regular characters
      tc show
    } ifelse

  grestore
} bind def


/ShowBox { % x1 y1 x2 y2 filled ShowBox
  gsave
    /filled exch def 
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath

    clip
    
    filled {
      fill
    }{ 
      0 setgray stroke   
    } ifelse

  grestore
} bind def


/DrawMask { % x1 y1 x2 y2 filled DrawMask 
  gsave
    /filled exch def
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath

    clip

    1 setgray

    fill
  grestore
} bind def


/MakeNumber { % number MakeNumber
  gsave
    SetNumberFont
    stackWidth 0 translate
    90 rotate % rotate so the number fits
    dup stringwidth pop % find the length of the number
    neg % prepare for move
    stackMargin sub % Move back a bit
    charWidth (0) CharBoxHeight % height of numbers
    sub 2 div %
    moveto % move back to provide space
    show
  grestore
} bind def

 
/SetColor{ % <char> SetColor
  dup colorDict exch known {
    colorDict exch get aload pop setrgbcolor
  } {
    pop
    black aload pop setrgbcolor
  } ifelse 
} bind def


% define fonts
/SetTitleFont  {/Times-Bold findfont titleFontsize scalefont setfont} bind def
/SetLogoFont   {/Helvetica-Narrow-Bold findfont charWidth  scalefont setfont} bind def
/SetStringFont {/Helvetica-Bold findfont fontsize scalefont setfont} bind def
/SetPrimeFont  {/Symbol findfont fontsize scalefont setfont} bind def
/SetSmallFont  {/Helvetica findfont smallFontsize scalefont setfont} bind def
/SetNumberFont {/Helvetica-Bold findfont numberFontsize scalefont setfont} bind def


%Take a single character and return the bounding box
/CharBox { % <char> CharBox <lx> <ly> <ux> <uy>
  gsave
    newpath
    0 0 moveto
    % take the character off the stack and use it here:
    true charpath 
    flattenpath 
    pathbbox % compute bounding box of 1 pt. char => lx ly ux uy
    % the path is here, but toss it away ...
  grestore
} bind def


% The height of a characters bounding box
/CharBoxHeight { % <char> CharBoxHeight <num>
  CharBox
  exch pop sub neg exch pop
} bind def


% The width of a characters bounding box
/CharBoxWidth { % <char> CharBoxHeight <num>
  CharBox
  pop exch pop sub neg 
} bind def


%%EndProlog

%%Page: 1 1
StartLogo

/topLine true def

StartEnrichedLine
{$DATA_ENRICHED}
EndLine

/topLine false def

StartConservedLine
{$DATA_CONSERVED}
EndLine

StartDepletedLine
{$DATA_DEPLETED}
EndLine

EndLogo

%%EOF
